"""
CrewAI Example: Structured Output with output_pydantic

This script demonstrates how to:
- Add two numbers with a CrewAI agent
- Use Pydantic to validate the output schema
- Cache only odd results
"""

from crewai import Agent, Task, Crew
from crewai.tools import tool
from pydantic import BaseModel, Field
import time

# Define the output model using Pydantic
class NumberValidation(BaseModel):
    result: int = Field(..., description="The result of the addition")

# Step 1: Define a tool that adds two numbers and returns a validated output
@tool
def add_numbers(a: int, b: int) -> dict:
    """
    Adds two integers and returns the result in a structured dict.

    Args:
        a (int): First number
        b (int): Second number

    Returns:
        dict: A dictionary with the result
    """
    print(f"Adding {a} + {b}...")
    time.sleep(1)
    return {"result": a + b}

# Step 2: Define a cache function that caches only if the result is odd
def cache_func(args, result):
    """
    Cache only if the result is odd.

    Args:
        args: Tool arguments
        result (dict): Output from the tool

    Returns:
        bool: True to cache, False otherwise
    """
    return result["result"] % 2 != 0

add_numbers.cache_function = cache_func

# Step 3: Define the agent
agent = Agent(
    role="Calculator",
    goal="Add two numbers",
    backstory="An agent that returns structured, validated results.",
    tools=[add_numbers],
    verbose=True
)

# Step 4: Get user input and run the task
def get_user_input_and_run_task():
    num1 = int(input("Enter first number: "))
    num2 = int(input("Enter second number: "))

    # Step 5: Create a task with output_pydantic validation
    task = Task(
        description=f"Add {num1} and {num2} using the add_numbers tool.",
        agent=agent,
        output_pydantic=NumberValidation  # âœ… This enforces structured output
    )

    # Step 6: Run the Crew
    crew = Crew(
        agents=[agent],
        tasks=[task],
        verbose=True
    )

    # Step 7: Execute and get the validated result
    result = crew.kickoff()
    print("\nValidated Output:")
    print(result)

# Start it
get_user_input_and_run_task()
