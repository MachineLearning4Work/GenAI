"""
CrewAI Example: Add Two Numbers with Conditional Caching

This script demonstrates how to use CrewAI to create an agent that adds two
numbers entered by the user. The result is cached only if the sum is odd.

Features:
- Tool definition using @tool
- Custom caching logic using a cache function
- Dynamic task creation from user input
- Execution through a Crew instance
"""

from crewai import Agent, Task, Crew
from crewai.tools import tool
import time

# Step 1: Define the tool to add two numbers
@tool
def add_numbers(a: int, b: int) -> int:
    """
    Adds two integers and simulates a delay to mimic a heavy computation.

    Args:
        a (int): First number
        b (int): Second number

    Returns:
        int: Sum of a and b
    """
    print(f"Adding {a} + {b}...")
    time.sleep(1)  # Simulate computation delay
    return a + b

# Step 2: Define the cache function that only caches if the result is odd
def cache_func(args, result):
    """
    Determines whether the result should be cached.

    Only caches if the result is an odd number.

    Args:
        args (tuple): Arguments passed to the tool
        result (Any): The result returned by the tool

    Returns:
        bool: True if result is odd (should be cached), False otherwise
    """
    return result % 2 != 0  # Cache only if the result is odd

# Step 3: Apply the cache function to the tool
add_numbers.cache_function = cache_func

# Step 4: Create an agent using the tool
agent = Agent(
    role="Calculator",
    goal="Add two numbers",
    backstory="Can compute sums and cache results when odd.",
    tools=[add_numbers],
    verbose=True
)

# Step 5: Define the task using the agent (we'll use user input here)
def get_user_input_and_run_task():
    """
    Collects user input, creates a dynamic CrewAI task to add the two numbers,
    and executes it via an agent using the add_numbers tool.
    """
    # Get two numbers from user input
    num1 = int(input("Enter the first number: "))
    num2 = int(input("Enter the second number: "))
    
    # Step 6: Create the task dynamically using the user input
    task = Task(
        description=f"Add {num1} and {num2} using the add_numbers tool.",
        agent=agent,
        inputs={"a": num1, "b": num2}
    )

    # Step 7: Create and run the Crew (agent and task)
    crew = Crew(
        agents=[agent],
        tasks=[task],
        verbose=True
    )

    # Start the task
    crew.kickoff()

# Run the function to get user input and execute
get_user_input_and_run_task()
