"""
CrewAI Structured Addition with Cache Logging

This script:
- Adds two numbers via a CrewAI agent and tool
- Uses a Pydantic model to validate the output
- Caches results only when the sum is odd
- Logs when the tool is executed (cache miss)
- Logs when a result is chosen to be cached or not
"""

from crewai import Agent, Task, Crew
from crewai.tools import tool
from pydantic import BaseModel, Field
import time

# ------------------------
# Output validation schema
# ------------------------
class NumberValidation(BaseModel):
    """
    Pydantic model to validate the output format.
    """
    result: int = Field(..., description="The result of the addition")

# ------------------------
# Tool with logging for cache use
# ------------------------
@tool
def add_numbers(a: int, b: int) -> dict:
    """
    Adds two numbers and returns the result in a structured dict.
    Includes a print statement that appears only if cache is not used.

    Args:
        a (int): First number
        b (int): Second number

    Returns:
        dict: A dictionary with the 'result' key.
    """
    print("‚öôÔ∏è  Cache miss: Executing add_numbers tool...")
    time.sleep(1)
    return {"result": a + b}

# ------------------------
# Cache function with decision logging
# ------------------------
def cache_func(args, result):
    """
    Determines if a result should be cached based on whether it's odd.
    Also logs the caching decision.

    Args:
        args (tuple): Arguments passed to the tool.
        result (dict): Output from the tool.

    Returns:
        bool: True to cache, False otherwise.
    """
    is_odd = result["result"] % 2 != 0
    print(f"üß† Cache decision: {'Caching' if is_odd else 'Not caching'} result {result['result']}")
    return is_odd

# Assign cache policy to the tool
add_numbers.cache_function = cache_func

# ------------------------
# Agent definition
# ------------------------
agent = Agent(
    role="Calculator",
    goal="Add numbers and return a validated result.",
    backstory="An expert in arithmetic who only caches odd sums.",
    tools=[add_numbers],
    verbose=True
)

# ------------------------
# Main runner function
# ------------------------
def get_user_input_and_run_task():
    """
    Prompts the user for two integers, creates a CrewAI task to add them,
    and validates the output using a Pydantic model.
    Logs whether caching is applied and whether the tool is executed.
    """
    a = int(input("Enter the first number: "))
    b = int(input("Enter the second number: "))

    task = Task(
        description=f"Add {a} and {b} using the add_numbers tool.",
        expected_output="Return a dictionary with a key 'result' containing the sum.",
        output_pydantic=NumberValidation,
        agent=agent
    )

    crew = Crew(
        agents=[agent],
        tasks=[task],
        verbose=True
    )

    result = crew.kickoff()

    print("\n‚úÖ Final structured and validated result:")
    print(result)

# ------------------------
# Run the full pipeline
# ------------------------
get_user_input_and_run_task()
