# -*- coding: utf-8 -*-
"""read_files_extension_save_same_folder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kSEM6QQviItZBVpxQhZlntTBokNEk-xJ
"""

import os
from google.colab import drive
drive.mount('/content/drive/')
base_path = '/content/drive/My Drive/'
data_path_googleDrive='genai_sample_data/'
data_path =os.path.join(base_path, data_path_googleDrive)
print("--------Data Path in Google Drive \n")
print(data_path)
print("--------------------------------")

# List all files and folders in the directory
if os.path.exists(data_path):
    file_paths = os.listdir(data_path)
    print("Files and folders in directory:")
    for f in file_paths:
        print(f)
else:
    print("The directory does not exist.")

print("File_paths : \n ")
print(file_paths)

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !sudo apt-get update
# !sudo apt-get install libreoffice

import subprocess
from pathlib import Path

def convert_docx_to_pdf(input_path):
    input_path = Path(input_path)
    output_dir = input_path.parent
    subprocess.run([
        "libreoffice", "--headless", "--convert-to", "pdf", str(input_path), "--outdir", str(output_dir)
    ], check=True)
    return output_dir / (input_path.stem + ".pdf")

def convert_word_folder_to_pdf(folder_path):
    folder = Path(folder_path)
    # Find all .docx files in the folder using Path.glob
    docx_files = folder.glob("*.docx")

    for docx_file in docx_files:
        try:
            print(f"Converting {docx_file.name}...")
            pdf_path = convert_docx_to_pdf(docx_file)
            print(f"Successfully created {pdf_path}")
        except subprocess.CalledProcessError as e:
            print(f"Error converting {docx_file.name}: {e}")
        except Exception as e:
            print(f"Unexpected error for {docx_file.name}: {e}")

# Example usage
folder_path = "path/to/your/folder"  # Replace with your folder path

folder_path='/content/drive/My Drive/genai_sample_data/'
convert_word_folder_to_pdf(folder_path)

import os
import mimetypes

# Initialize mimetypes
mimetypes.init()

# Define common raster image extensions
IMAGE_EXTENSIONS = ['.bmp', '.jpg', '.jpeg', '.png', '.gif', '.tif', '.tiff', '.webp']

def detect_file_format(file_path):
    ext = os.path.splitext(file_path)[1].lower()

    # Detect by extension
    if ext == '.pdf':
        return 'PDF'
    elif ext in ['.doc', '.docx']:
        return 'Word'
    elif ext in ['.ppt', '.pptx']:
        return 'PowerPoint'
    elif ext in ['.txt', '.text']:
        return 'Text'
    elif ext in IMAGE_EXTENSIONS:
        return 'Bitmap Image'

    # Fallback: MIME type
    mime_type, _ = mimetypes.guess_type(file_path)
    if mime_type:
        if 'pdf' in mime_type:
            return 'PDF'
        elif 'msword' in mime_type or 'wordprocessingml' in mime_type:
            return 'Word'
        elif 'presentation' in mime_type or 'powerpoint' in mime_type:
            return 'PowerPoint'
        elif 'text' in mime_type:
            return 'Text'
        elif mime_type.startswith('image/'):
            return 'Bitmap Image'

    return 'Unknown format'

# Define processing functions for each file type
def process_pdf(file_path):
    print(f"Processing PDF file: {file_path}")
    # Add your PDF processing logic here
    return "PDF processed"

def process_word(file_path):
    print(f"Processing Word file: {file_path}")
    # Add your Word processing logic here
    return "Word processed"

def process_powerpoint(file_path):
    print(f"Processing PowerPoint file: {file_path}")
    # Add your PowerPoint processing logic here
    return "PowerPoint processed"

def process_text(file_path):
    print(f"Processing Text file: {file_path}")
    # Add your Text processing logic here
    return "Text processed"

def process_image(file_path):
    print(f"Processing Image file: {file_path}")
    # Add your Image processing logic here
    return "Image processed"

def process_unknown(file_path):
    print(f"Processing Unknown file type: {file_path}")
    # Add your Unknown file processing logic here
    return "Unknown file processed"

def process_folder(folder_path):
    # Check if the folder exists
    if not os.path.exists(folder_path):
        print(f"The directory {folder_path} does not exist.")
        return

    # List all files in the directory
    file_paths = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]

    if not file_paths:
        print("No files found in the directory.")
        return

    # Get the first file
    first_file = file_paths[0]
    first_file_path = os.path.join(folder_path, first_file)

    # Detect the file format
    file_format = detect_file_format(first_file_path)
    print(f"First file: {first_file}, Format: {file_format}")

    # Call the appropriate processing function based on the file format
    if file_format == 'PDF':
        result = process_pdf(first_file_path)
    elif file_format == 'Word':
        convert_word_folder_to_pdf(folder_path)
    elif file_format == 'PowerPoint':
        result = process_powerpoint(first_file_path)
    elif file_format == 'Text':
        result = process_text(first_file_path)
    elif file_format == 'Bitmap Image':
        result = process_image(first_file_path)
    else:
        result = process_unknown(first_file_path)

    print(f"Result: {result}")

import subprocess
from pathlib import Path

def convert_docx_to_pdf(input_path):
    input_path = Path(input_path)
    output_dir = input_path.parent
    subprocess.run([
        "libreoffice", "--headless", "--convert-to", "pdf", str(input_path), "--outdir", str(output_dir)
    ], check=True)
    return output_dir / (input_path.stem + ".pdf")

def convert_folder_to_pdf(folder_path):
    folder = Path(folder_path)
    # Find all .docx files in the folder using Path.glob
    docx_files = folder.glob("*.docx")

    for docx_file in docx_files:
        try:
            print(f"Converting {docx_file.name}...")
            pdf_path = convert_docx_to_pdf(docx_file)
            print(f"Successfully created {pdf_path}")
        except subprocess.CalledProcessError as e:
            print(f"Error converting {docx_file.name}: {e}")
        except Exception as e:
            print(f"Unexpected error for {docx_file.name}: {e}")

# Example usage
folder_path = "path/to/your/folder"  # Replace with your folder path
convert_folder_to_pdf(folder_path)

# Example usage
if __name__ == "__main__":
    # Replace with your folder path
    #folder_path = input("Enter the folder path: ")  # e.g., '/content/drive/My Drive/genai_sample_data/'
    folder_path='/content/drive/My Drive/genai_sample_data/'
    process_folder(folder_path)