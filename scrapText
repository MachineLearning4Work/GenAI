

========================

**Subject:** Follow-Up on Integration Tasks  

Hi Raj,  

As Paco mentioned, we truly appreciate your help in merging the different files and folders, as well as making the necessary changes to the YAML files and Python code to integrate all crews seamlessly. 

Below are the key tasks and details for your reference:  

### **1. Main Execution File (`main_standard.py`)**  
- Uncomment **line 243**:  
  ```python  
  contractAnalystCrew()  # Executes parsing crew (Paco's version)  
  ```  
- Review **lines 44–46** to ensure:  
  - The filename matches what the parsing crew generates.  
  - The file paths/addresses are updated accordingly.  

### **2. Modified Files Under `tools` Folder**  
- `image_text_extraction_tool.py`  
- `custom_tools.py`  

### **3. Updates to `setup.py`**  
- Added the following import:  
  ```python  
  from tools.custom_tools import get_rate_exchange, get_rate_exchange_role  
  ```  

### **4. New Crew: `contract_standardization_crew`**  
- Place the entire **`contract_standardization_crew`** folder under the `crew` directory.  
- **Review carefully**:  
  - **Tasks & Agents**: Adjust file paths and parameters as needed.  
  - **Input/Output Alignment**:  
    - My input structure differs slightly from the parsing crew’s output (e.g., I use `role_id`, while Paco’s model uses `role_number`).  
    - Ensure the task YAML accepts files generated by the parsing crew and that JSON keys are consistent.  

### **5. File Path Updates**  
- **In `custom_tools.py` (lines 25–26)**: Update paths to reference the correct location of auxiliary files (CSV/Excel).  
- **In `main_standard.py` (lines 48–50)**: Update the path for `company_group_roles.csv`.  

### **6. Sample Input/Output for Reference**  
- Attached are sample JSON files (input/output) to illustrate the expected results from my crew.  

### **7. Summary of Modified/New Files**  
- **New Crew**: Config folder (agent/task YAML files).  
- **Modified Files**:  
  - `setup.py`  
  - `custom_tools.py` & `image_text_extraction_tool.py`  
  - `main_standard.py`  
- **Auxiliary Files**: CSV/Excel reference files.  
- **Samples**: Input/output JSON files.  

### **Key Challenge**  
- **Critical**: Ensure the task YAML correctly processes files from the parsing crew and that JSON keys align between crews.  

As this integration is very important to the team, I want to ensure we stay aligned. For quicker communication, I’m more responsive via WhatsApp (+1-438-368-3132) or my personal email (zadeh1980mehdi@gmail.com) outside of working hours.


Feel free to message me anytime. If I'm not asleep, I’ll be happy to hop on a call and review the details together.
Thanks again for your support!  













====================
legal_entities = [
    "Individual (Natural Person)",
    "Sole Proprietorship",
    "General Partnership (GP)",
    "Limited Partnership (LP)",
    "Limited Liability Partnership (LLP)",
    "Limited Liability Company (LLC)",
    "Corporation (Inc., Corp., Ltd.)",
    "Non-Profit Organization / NGO",
    "Trust (via Trustee)",
    "Joint Venture (JV)",
    "Cooperative (Co-op)",
    "Government Entity / Public Authority",
    "Municipality or Local Government",
    "Educational Institution (e.g., University)",
    "Association (e.g., Homeowners’ Association, Trade Association)",
    "Religious Organization / Church",
    "Foreign Entity (e.g., foreign corporation or LLC registered to do business)",
    "Estate (via Executor or Administrator)",
    "Union or Labor Organization"
]





import csv

# Your input string
data_string = """production management , data scientist  
technology management , data risk 
development , java programmer"""

# Split into lines and process
lines = [line.strip().split(' , ') for line in data_string.split('\n') if line.strip()]

# Write to CSV
with open('roles.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['role_group', 'role'])  # Write header
    writer.writerows(lines)  # Write data




import csv

def string_to_csv(input_string, header1, header2, output_file='roles.csv'):
    """
    Convert a string of comma-separated values to CSV with custom headers
    
    Args:
        input_string: Input text with lines of "value1, value2"
        header1: First column header name
        header2: Second column header name
        output_file: Output CSV filename
    """
    lines = [line.strip().split(',') for line in input_string.split('\n') if line.strip()]
    cleaned_lines = [[item.strip() for item in line] for line in lines]
    
    with open(output_file, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([header1, header2])
        writer.writerows(cleaned_lines)
    print(f"CSV file '{output_file}' created successfully!")

# Example usage:
data_string = """production management , data scientist  
technology management , data risk 
development , java programmer"""

string_to_csv(data_string, 'department', 'job_title', 'company_roles.csv')




import csv

def read_csv_to_dict(csv_file):
    """
    Reads a CSV file and returns a dictionary with header keys
    Each key contains a list of values from that column
    
    Args:
        csv_file: Path to the CSV file
        
    Returns:
        Dictionary with {header: [values]} structure
    """
    with open(csv_file, mode='r') as file:
        reader = csv.DictReader(file)
        result = {header: [] for header in reader.fieldnames}
        
        for row in reader:
            for header in reader.fieldnames:
                result[header].append(row[header])
                
    return result

# Example usage:
data = read_csv_to_dict('roles.csv')
print(data)

# Access specific columns:
print("\nRole Groups:", data['role_group'])
print("Roles:", data['role'])






@tool
def get_rate_exchange_v2(service_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Convert the 'amount' in the 'rate' dictionary to USD if it is in a different currency.
    Returns a dictionary with service_id, converted amount, currency (USD), hours_committed, and annual_fee.
    """
    my_dict_exchange_rates = exchange_rates()
    rate_info = service_data.get('rate', {})
    
    amount = rate_info.get('amount', 0)
    currency = rate_info.get('currency', 'USD')
    hours_committed = service_data.get('hours_committed', 0)

    if currency.upper() != 'USD':
        rate = my_dict_exchange_rates.get(currency.upper())
        if rate:
            amount *= rate
        else:
            raise ValueError(f"Exchange rate for currency '{currency}' not found")

    amount = round(amount, 2)
    annual_fee = round(amount * 1880, 2)

    return {
        'service_id': service_data.get('service_id'),
        'amount': amount,
        'currency': 'USD',
        'hours_committed': hours_committed,
        'annual_fee': annual_fee
    }
