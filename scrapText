
legal_entities = [
    "Individual (Natural Person)",
    "Sole Proprietorship",
    "General Partnership (GP)",
    "Limited Partnership (LP)",
    "Limited Liability Partnership (LLP)",
    "Limited Liability Company (LLC)",
    "Corporation (Inc., Corp., Ltd.)",
    "Non-Profit Organization / NGO",
    "Trust (via Trustee)",
    "Joint Venture (JV)",
    "Cooperative (Co-op)",
    "Government Entity / Public Authority",
    "Municipality or Local Government",
    "Educational Institution (e.g., University)",
    "Association (e.g., Homeownersâ€™ Association, Trade Association)",
    "Religious Organization / Church",
    "Foreign Entity (e.g., foreign corporation or LLC registered to do business)",
    "Estate (via Executor or Administrator)",
    "Union or Labor Organization"
]





import csv

# Your input string
data_string = """production management , data scientist  
technology management , data risk 
development , java programmer"""

# Split into lines and process
lines = [line.strip().split(' , ') for line in data_string.split('\n') if line.strip()]

# Write to CSV
with open('roles.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['role_group', 'role'])  # Write header
    writer.writerows(lines)  # Write data




import csv

def string_to_csv(input_string, header1, header2, output_file='roles.csv'):
    """
    Convert a string of comma-separated values to CSV with custom headers
    
    Args:
        input_string: Input text with lines of "value1, value2"
        header1: First column header name
        header2: Second column header name
        output_file: Output CSV filename
    """
    lines = [line.strip().split(',') for line in input_string.split('\n') if line.strip()]
    cleaned_lines = [[item.strip() for item in line] for line in lines]
    
    with open(output_file, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([header1, header2])
        writer.writerows(cleaned_lines)
    print(f"CSV file '{output_file}' created successfully!")

# Example usage:
data_string = """production management , data scientist  
technology management , data risk 
development , java programmer"""

string_to_csv(data_string, 'department', 'job_title', 'company_roles.csv')




import csv

def read_csv_to_dict(csv_file):
    """
    Reads a CSV file and returns a dictionary with header keys
    Each key contains a list of values from that column
    
    Args:
        csv_file: Path to the CSV file
        
    Returns:
        Dictionary with {header: [values]} structure
    """
    with open(csv_file, mode='r') as file:
        reader = csv.DictReader(file)
        result = {header: [] for header in reader.fieldnames}
        
        for row in reader:
            for header in reader.fieldnames:
                result[header].append(row[header])
                
    return result

# Example usage:
data = read_csv_to_dict('roles.csv')
print(data)

# Access specific columns:
print("\nRole Groups:", data['role_group'])
print("Roles:", data['role'])






@tool
def get_rate_exchange_v2(service_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Convert the 'amount' in the 'rate' dictionary to USD if it is in a different currency.
    Returns a dictionary with service_id, converted amount, currency (USD), hours_committed, and annual_fee.
    """
    my_dict_exchange_rates = exchange_rates()
    rate_info = service_data.get('rate', {})
    
    amount = rate_info.get('amount', 0)
    currency = rate_info.get('currency', 'USD')
    hours_committed = service_data.get('hours_committed', 0)

    if currency.upper() != 'USD':
        rate = my_dict_exchange_rates.get(currency.upper())
        if rate:
            amount *= rate
        else:
            raise ValueError(f"Exchange rate for currency '{currency}' not found")

    amount = round(amount, 2)
    annual_fee = round(amount * 1880, 2)

    return {
        'service_id': service_data.get('service_id'),
        'amount': amount,
        'currency': 'USD',
        'hours_committed': hours_committed,
        'annual_fee': annual_fee
    }
